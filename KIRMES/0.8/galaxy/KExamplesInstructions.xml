<?xml version="1.0" encoding="UTF-8"?>
<tool id="kirmes_instructions" name="(0) Examples and Instructions" version="0.8">
  <description>Instructions on how to use the KIRMES modular 
  	prediction and classification tools, including examples 
  	with predefined datasets.
  </description>
  <requirements>
	<requirement type='package'>kirmes</requirement>
  </requirements>
  <command interpreter="python">
    ../src/kinstructions.py -e $example_set -p $positives -n $negatives -i $pgff -j $ngff -q $predfasta -u $predgff -x $imm > $info
  </command>
  <inputs>
    <param name="example_set" type="select" 
      label="Example data for the following cases is added to your Galaxy History on the right.">
      <!--  <option value="wuschel">Arabidopsis thaliana: stem cell regulating genes</option>  -->
      <option value="ath">Arabidopsis thaliana: heat shock genes</option> 
      <option value="gen">Generated toy dataset: implanted motif "GATTACA"</option>
    </param>
  </inputs>
  <outputs>
    <data format="fasta" name="positives" label="Example 1p: Labeled regulatory sequences in FASTA format (positives)" />
    <data format="gff" name="pgff" label="Example 2p: Motif positions in GFF3 format (positives)" />
    <data format="fasta" name="negatives" label="Example 1n: Labeled regulatory sequences in FASTA format (negatives)" />
    <data format="gff" name="ngff" label="Example 2n: Motif positions in GFF3 format (negatives)" />
    <data format="imm" name="imm" label="Example 2x: INCLUSive Motif Model file with PWMs of motifs found in FASTA files" />
    <data format="fasta" name="predfasta" label="Example 3f: Unlabeled regulatory sequences in FASTA format (for prediction)" />
    <data format="gff" name="predgff" label="Example 3g: Motifs in unlabeled regulatory sequences (for prediction)" />
    <data format="txt" name="info" label="Example 0: Information about the datasets" />
  </outputs>

  <help>


.. class:: infomark

**Introduction**

This is KIRMES: Kernel-based Identification of Regulatory Modules
in Euchromatic Sequences. KIRMES predicts coregulation based on
gene sets that exhibit similar behavior. 

You can upload a pair of FASTA files, containing the regulatory region
of genes e.g. from a microarray experiment, ChIP-chip binding or 
next generation sequencing data. A comparison to common motif finding 
methods and data about its effectiveness has been published in [1].

The following is a description of the Motif Finding, Training and 
Prediction tools found on this web server.

If you have additional questions about KIRMES, please write an
email to sebi@tue.mpg.de. For problems with our Galaxy server, please 
write to galaxy@raetschlab.org

For a general introduction to Galaxy, please visit 
http://galaxy.psu.edu/

**References** 

[1] Schultheiss SJ, Busch W, Lohmann JU, Kohlbacher O, Raetsch G. 
(2009) KIRMES: Kernel-based identification of regulatory modules in 
euchromatic sequences. Bioinformatics 25(16):2126-33.

------

.. class:: infomark

**1. Motif Finders** 

In a first step, KIRMES identifies the "interesting" areas of the 
regulatory regions in the input data, using common motif finding algorithms.
You can choose between a simple k-mer counting strategy (fastest), the INCLUSive
MotifFinder developed by Gert Thijs et al. [2], and PRIORITY, a state-of-the-art
Gibbs sampler, developed by Raluca Gordan et al. [3]. These programs return a list of 
50-200 motifs and their best-matching location in each entry of the FASTA file. 

It is important to upload both a positive and a negative dataset. Here, positive 
means the FASTA file contains mainly regulatory regions from genes that
are suspected to be co-regulated, e.g. as shown by an experiment. The negative 
dataset consists of regulatory regions of genes that are not regulated by the same 
mechanism as the ones in the positive set. Such a set can be obtained, for example, 
from unbound regions in a ChIP-chip experiment. The ratio of positive examples to 
negative examples should be the same as the one expected in the prediction dataset.
For instance, if 10% of the genome are suspected to be regulated by the mechanism
under scrutiny, the ratio should be 1:10 positives:negatives.

**2. Training**

The output of the motif finders is used to train a classifier to discriminate between
examples from the positive and negative datasets. It will use the FASTA files from before
and the generated GFF files as input. Optionally, information about sequence conservation 
can be provided. This tool returns a trained KIRMES predictor, as well as 
position weight matrices and sequence logos of the top discriminating motifs.

**3. Prediction**

This tool uses an unlabeled FASTA file and a trained KIRMES predictor as input. 
It returns the FASTA header names of each entry and a classification: It is positive,
i.e. +1, if this promoter region contains enough similarities to the ones in 
the positive input dataset, and negative otherwise.

**0. Examples**

The example data from Arabidopsis thaliana contains +1000 base pairs upstream from the 
gene start for those genes that reacted to a heat shock treatment with sudden over- 
or underexpression [4]. The negative dataset contains genes that were relatively highly 
expressed both in the treated and untreated plants. They seem to be unaffected by
the heat shock and are thus probably not regulated by the same mechanism as the 
genes that do react. One can find certain motifs that are common among most of the 
reacting genes, including the published heat shock element [4].

The generated dataset contains a planted motif, GATTACA in the positive dataset. You
can generate more datasets like these with our Toy Data > Motif Gen (FASTA) tool.

When running this tool, you will receive the input for the first tool, the 
positive and negative FASTA files,
and its output, the motif positions in GFF format. This way, you can also start 
directly with the Training step. The third FASTA file can be used in a subsequent 
prediction step.

**References**

[2] Thijs G, Moreau Y, De Smet F, Mathys J, Lescot M, Rombauts S, Rouze P, 
De Moor B, Marchal K. (2002) INCLUSive: integrated clustering, upstream 
sequence retrieval and motif sampling. Bioinformatics 18(2):331-332.

[3] Gordan R, Narlikar L, Hartemink AJ. (2008) A fast, alignment-free, 
conservation-based method for transcription factor binding site discovery.
Lecture Notes in Computer Science: RECOMB 2008, Vingron M and Wong L, Eds.
Springer Verlag Heidelberg, Germany. 4955:98-111.

[4] Busch W, Wunderlich M, Schoeffl F. (2004) Identification of novel heat 
shock factor-dependent genes and biochemical pathways in Arabidopsis 
thaliana. Plant J 1(41):1-14.

------

.. class:: infomark

**About formats**

**FASTA format** A sequence in FASTA format begins with a single-line
description, followed by lines of sequence data. The description line
is distinguished from the sequence data by a "greater than" (>) symbol
in the first column. The token until the first space or the end of the 
line is used as an identifier for the sequence. The remainder of the 
description line is ignored.

An example sequence in FASTA format is:

>CHR1

CCCTAAACCCTAAACCCTAAACCCTAAACCTCTGAATCCTTAATCCCTAAATCCCTAAAT
CTTTAAATCCTACATCCATGAATCCCTAAATACCTAATTCCCTAAACCCGAAACCGGTTT
CTCTGGTTGAAAATCATTGTGTATATAATGATAATTTTATCGTTTTTATGTAATTGCTTA
TTGTTGTGTGTAGATTTTTTAAAAATATCATTTGAGGTCAATACAAATCCTATTTCTTGT
GGTTTTCTTTCCTTCACTTAGCTATGGATGGTTTATCTTCATTTGTTATATTGGATACAA
GCTTTGCTACGATCTACATTTGGGAATGTGAGTCTCTTATTGTAACCTTAGGGTTGGTTT
ATCTCAAGAATCTTATTAATTGTTTGGACTGTTTATGTTTGGACATTTATTGTCATTCTT
ACTCCTTTGTGGAAATGTTTGTTCTATCAATTTATCTTTTGTGGGAAAATTATTTAGTTG
TAGGGATGAAGTCTTTCTTCGTTGTTGTTACGCTTGTCATCTCATCTCTCAATGATATGG
GATGGTCCTTTAGCATTTATTCTGAAGTTCTTCTGCTTGATGATTTTATCCTTAGCCAAA
AGGATTGGTGGTTTGAAGACACATCATATCAAAAAAGCTATCGCCTCGACGATGCTCTAT
TTCTATCCTTGTAGCACACATTTTGGCACTCAAAAAAGTATTTTTAGATGTTTGTTTTGC
...

**GFF3 format** General Feature Format is a format for describing genes
and other features associated with DNA, RNA, and protein sequences. GFF
lines have nine tab-separated fields:

    1. seqname - The name of the chromosome or scaffold (e.g., chr1, chrY_random).
    2. source - The program that generated this feature.
    3. feature - The name of this type of feature. Some examples of standard feature types are "CDS", "start_codon", "stop_codon", and "exon".
    4. start - The starting position of the feature in the sequence. (The first base on a chromosome is numbered 1.)
    5. end - The ending position of the feature (inclusive).
    6. score - A score between 0 and 1000. If there is no score value, enter ".".
    7. strand - Defines the strand - either '+' or '-'.
    8. frame - If the feature is a coding exon, frame should be a number between 0 and 2 that represents the reading frame of the first base. If the feature is not a coding exon, the value should be '.'.
    9. group - All lines with the same group are linked together into a single item.

For more information see http://www.sequenceontology.org/gff3.shtml


**TKP format** Trained KIRMES Predictor is an internal structure that
contains the complete trained model including information about every
motif and its contribution to the classification accuracy.


------

.. class:: infomark

**Licence Information: GPL**


Copyright (C) Sebastian J. Schultheiss (sebi@umich.edu)                           
                                                                                             
This program is free software; you can redistribute it and/or modify                   
it under the terms of the GNU General Public License as published by                   
the Free Software Foundation; either version 3 of the License, or                      
(at your option) any later version.                                                    
                                                                                            
This program is distributed in the hope that it will be useful,                        
but WITHOUT ANY WARRANTY; without even the implied warranty of                         
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                            
GNU General Public License for more details.                                           
                                                                                             
You should have received a copy of the GNU General Public License                       
along with this program; if not, see http://www.gnu.org/licenses                       
or write to the Free Software Foundation, Inc., 51 Franklin Street,                    
Fifth Floor, Boston, MA 02110-1301  USA                                                

</help>
</tool>
